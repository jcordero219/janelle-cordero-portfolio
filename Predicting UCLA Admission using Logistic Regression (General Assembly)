{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DS-NYC-45 | Unit Project 4: Notebook with Executive Summary\n",
    "\n",
    "In this project, you will summarize and present your analysis from Unit Projects 1-3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import statsmodels.api as sm\n",
    "\n",
    "pd.set_option('display.max_rows', 10)\n",
    "pd.set_option('display.max_columns', 10)\n",
    "pd.set_option('display.notebook_repr_html', True)\n",
    "\n",
    "import statsmodels.formula.api as smf\n",
    "\n",
    "from sklearn import linear_model\n",
    "\n",
    "%matplotlib inline\n",
    "plt.style.use('ggplot')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> ## Question 1.  Introduction\n",
    "> Write a problem statement for this project."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Determine how likely an applicant is to be admitted to UCLA using GRE score, Grade Point Average, and college prestige. Using the (presumed) cross-sectional data, we will observe changes in each predictor variable to dictate whether there is an association between these academic factors and UCLA admittance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is a lot of unkown information about this dataset. Therefore, some assumptions we must make are:  \n",
    "1) The data is cross-sectional  \n",
    "2) The data was collected during a structured time period  \n",
    "3) The data was collected in a clean way without incomplete information for any applicant  \n",
    "4) Each applicant is only counted once (i.e. did not take the GRE over and applied again)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> ## Question 2.  Dataset\n",
    "> Write up a description of your data and any cleaning that was completed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are four variables of the dataset: *admit*, *gre*, *gpa*, and *prestige*.  \n",
    "\n",
    "*admit* is the response variable\n",
    "\n",
    "\n",
    "*gre*, *gpa*, and *prestige* are predictors of the response variable, *admit*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "|**Variable** | **Description**            | **Data Type**|\n",
    "|:----------: | :------------------------: | :---------:  |\n",
    "|admit        | 0=Not Admitted, 1=Admitted | Categorical  |\n",
    "|gre          | GRE Test Score             | Continuous   |\n",
    "|gpa          | Grade Point Average        | Continuous   |\n",
    "|prestige     | 1 = highest tier, 2 = medium to high tier, 3 = low to medium tier, 4 = lowest tier     | Categorical|\n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>admit</th>\n",
       "      <th>gre</th>\n",
       "      <th>gpa</th>\n",
       "      <th>prestige</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>380.0</td>\n",
       "      <td>3.61</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>660.0</td>\n",
       "      <td>3.67</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>800.0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>640.0</td>\n",
       "      <td>3.19</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>520.0</td>\n",
       "      <td>2.93</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   admit    gre   gpa  prestige\n",
       "0      0  380.0  3.61       3.0\n",
       "1      1  660.0  3.67       3.0\n",
       "2      1  800.0  4.00       1.0\n",
       "3      1  640.0  3.19       4.0\n",
       "4      0  520.0  2.93       4.0"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(os.path.join('..', '..', 'dataset', 'ucla-admissions.csv'))\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(400, 4)"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the data set, we can see that there are 5 missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.isnull(df).values.sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are 3 rows with missing values within our dataset. To continue our analysis, we are going to exclude these rows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>admit</th>\n",
       "      <th>gre</th>\n",
       "      <th>gpa</th>\n",
       "      <th>prestige</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>187</th>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>212</th>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.87</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236</th>\n",
       "      <td>1</td>\n",
       "      <td>660.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     admit    gre   gpa  prestige\n",
       "187      0    NaN   NaN       2.0\n",
       "212      0    NaN  2.87       2.0\n",
       "236      1  660.0   NaN       NaN"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.isnull().any(axis=1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(397, 4)"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "> ## Question 3.  Demo\n",
    "> Provide a table that explains the data by admission status."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the code below, we can describe what the data looks like when an applicant is admitted to UCLA. The average GRE, GPA, and prestige level are 618, 3.5, and 2.2 respectively. A prestige of 2 means that a school is of medium to high prestige."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>admit</th>\n",
       "      <th>gre</th>\n",
       "      <th>gpa</th>\n",
       "      <th>prestige</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>126.0</td>\n",
       "      <td>126.000000</td>\n",
       "      <td>126.000000</td>\n",
       "      <td>126.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.0</td>\n",
       "      <td>618.571429</td>\n",
       "      <td>3.489206</td>\n",
       "      <td>2.150794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.0</td>\n",
       "      <td>109.257233</td>\n",
       "      <td>0.371655</td>\n",
       "      <td>0.921455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.0</td>\n",
       "      <td>300.000000</td>\n",
       "      <td>2.420000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.0</td>\n",
       "      <td>540.000000</td>\n",
       "      <td>3.220000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.0</td>\n",
       "      <td>620.000000</td>\n",
       "      <td>3.545000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.0</td>\n",
       "      <td>680.000000</td>\n",
       "      <td>3.757500</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.0</td>\n",
       "      <td>800.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       admit         gre         gpa    prestige\n",
       "count  126.0  126.000000  126.000000  126.000000\n",
       "mean     1.0  618.571429    3.489206    2.150794\n",
       "std      0.0  109.257233    0.371655    0.921455\n",
       "min      1.0  300.000000    2.420000    1.000000\n",
       "25%      1.0  540.000000    3.220000    1.000000\n",
       "50%      1.0  620.000000    3.545000    2.000000\n",
       "75%      1.0  680.000000    3.757500    3.000000\n",
       "max      1.0  800.000000    4.000000    4.000000"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['admit']==1].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Statistics for students who were no admitted to UCLA tend to be lower. The average GRE, GPA, and prestige level are 573, 3.3, and 2.6. The higher prestige value means a lower prestige level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>admit</th>\n",
       "      <th>gre</th>\n",
       "      <th>gpa</th>\n",
       "      <th>prestige</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>271.0</td>\n",
       "      <td>271.000000</td>\n",
       "      <td>271.000000</td>\n",
       "      <td>271.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.0</td>\n",
       "      <td>573.579336</td>\n",
       "      <td>3.347159</td>\n",
       "      <td>2.645756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.0</td>\n",
       "      <td>116.052798</td>\n",
       "      <td>0.376355</td>\n",
       "      <td>0.918922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.0</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>2.260000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.0</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>3.080000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.0</td>\n",
       "      <td>580.000000</td>\n",
       "      <td>3.340000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.0</td>\n",
       "      <td>660.000000</td>\n",
       "      <td>3.610000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>0.0</td>\n",
       "      <td>800.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       admit         gre         gpa    prestige\n",
       "count  271.0  271.000000  271.000000  271.000000\n",
       "mean     0.0  573.579336    3.347159    2.645756\n",
       "std      0.0  116.052798    0.376355    0.918922\n",
       "min      0.0  220.000000    2.260000    1.000000\n",
       "25%      0.0  500.000000    3.080000    2.000000\n",
       "50%      0.0  580.000000    3.340000    3.000000\n",
       "75%      0.0  660.000000    3.610000    3.000000\n",
       "max      0.0  800.000000    4.000000    4.000000"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['admit']==0].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Within the data, we can see that there are significantly more applicants rejected from UCLA than there are accepted, making UCLA likely selective."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n/Hft7XldXZ28Xq9WrFihr3933bJlyzRu3DjNmjXL8toTlcnfeZ8+fdpM0fXv319NTU2W1dsdmPT8\n8OHDuukBDnnIAAACYElEQVSmmyK/JyUladCgQWpsbLS05u+TWLyGdpkrD/n5+bLZbKqtrY2MffLJ\nJxoyZEibdYcOHdrmxo7q6moNHTq00+vsTkx6HggE9Mc//lE2m02PPvqo+vTpY2Wp3UZ7ez506FA9\n9dRTeuKJJ+R2u+V2uyVJ9913n0pLSy2tOdGZPrccOXIkaqyhoUHZ2dmdXmd3YtJzp9PZ5p0Vx44d\no+edKBavoV0mPDgcDl133XV67rnn9Omnn2rv3r3avn17JJH6/f7Ie1B/+MMf6uzZs9qwYYM8Ho/W\nr1+vQCCga6+9Np6nkHBMer5t2zZ5vV6VlZXp/Pnz8vv98vv9vNvCUHt7brfb1a9fv6gf6d9PtOnp\n6fE8hYRj8nc+ceJEHT16VFu2bNHx48dVUVEhr9ersWPHxvMUEo5Jz3/0ox9p586devfdd3X8+HG9\n8MILampq0rhx4+J5Ct1OrF9DU37/+9//vpNqNXbFFVeovr5eL774og4ePKhbb7018gc0Y8YM9e/f\nX/n5+bLb7Ro+fLjeeOMNvfrqq2ptbdWDDz6ovn37xvkMEk97e75u3Tr5/X7t3LlT27dvj/z4/X6V\nlJTE+SwSS3t7/k1btmzR9ddfr6ysLIsrTnzt7XlaWpqGDx+uv//979qyZYvOnj2r3/zmN23uTMd/\n196eDxw4UE6nU5WVlXrttdciz+cXAjM65pvPF7F+DU0Kf31CFQAA4L/oMtMWAAAgMRAeAACAEcID\nAAAwQngAAABGCA8AAMAI4QEAABghPAAAACOEBwAAYITwAAAAjBAeAACAEcIDAAAw8v8A5n35vvep\n2TEAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xe28fe80>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df['admit']);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see the skew of data for GPA and GRE in the below boxplots. GRE has outliers below 300."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xddcc320>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplot(1,2,1)\n",
    "plt.boxplot(df['gre'],sym='o',patch_artist=True)\n",
    "plt.subplot(1,2,2)\n",
    "plt.boxplot(df['gpa'],sym='v',patch_artist=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking closer at GRE, we can see that the bulk of scores are between 500 and 700 with a right skew."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\ns7NVWFio//iP/5DNZtOIESO0bds2SV+9XeZK53K5dOjQIX344YcqKSmRz+dTfX29Fi9erFmzZunA\ngQP07Ruys7M1YsSI6L9Dhw7Jbrdrzpw5GjVqFMdaP/Ly8rRnzx796U9/0rXXXiufz6ctW7ZowYIF\nuuWWWzjWTOTk5OjIkSM6cOCAJk2apGPHjmn79u1asGABj88BeP755/UXf/EXuvbaa6NjPEbNFRQU\n6M0339SJEyd07bXXqrm5Wdu3b9eiRYt00003JfxYy+jr6+tL1H9Oknbv3q3nn3/edNuLL76oU6dO\nqa6uTi0tLSoqKtJ9992nqVOnRuccOnRIW7duVVtbm9xut6qqqlRQUJDIkoeMUCik5557To2NjcrK\nytLtt98efaHP559/rk2bNtG3b/HUU09JUvQTF+lZ//x+v7Zt2yav16thw4bptttu0+LFiyXRt/58\n8cUXqq+v18GDB6OPz0WLFkmiZ5fyk5/8RNXV1Re9foi+mWttbdXWrVvl8/mUm5ur22+/XXfccYek\nxPcs4SEBAACkJy7wBAAATBESAACAKUICAAAwRUgAAACmCAkAAMAUIQEAAJgiJAAAAFOEBAAAYIqQ\nAAAATBESAACAKUICAAAw9f8AkL0ncivelpkAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xddf1780>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df['gre'],color='blue');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>admit</th>\n",
       "      <th>gre</th>\n",
       "      <th>gpa</th>\n",
       "      <th>prestige</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>admit</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.181202</td>\n",
       "      <td>0.174116</td>\n",
       "      <td>-0.243563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gre</th>\n",
       "      <td>0.181202</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.382408</td>\n",
       "      <td>-0.124533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gpa</th>\n",
       "      <td>0.174116</td>\n",
       "      <td>0.382408</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.060976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prestige</th>\n",
       "      <td>-0.243563</td>\n",
       "      <td>-0.124533</td>\n",
       "      <td>-0.060976</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             admit       gre       gpa  prestige\n",
       "admit     1.000000  0.181202  0.174116 -0.243563\n",
       "gre       0.181202  1.000000  0.382408 -0.124533\n",
       "gpa       0.174116  0.382408  1.000000 -0.060976\n",
       "prestige -0.243563 -0.124533 -0.060976  1.000000"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Hypothesis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After performing exploratory data analysis, we can get a better picture of which features affect our response and how. Based on our data, there are more applicants from schools with prestige lower than the highest level (1). However, we can see that there are more rejections then acceptances to UCLA. Therefore, I cannot solely use the high distribution of lower-tier schools to make an assumption. Based on our correlation table, we can see that prestige  of levels 3 and 4 are negatively correlated with admit, therefore leading to the hypthesis that applicants from prestigious schools are more likely to have higher GPAs, higher GRE scores, and admittance to UCLA."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> ## Question 4. Methods\n",
    "> Write up the methods used in your analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using logistic regression, we can find coefficients coresponding to the chance that an applicant will be admitted to UCLA given an increase in each of the features. To clean the data further, the categorical 'prestige' column needs to be converted into dummy variables necessary for logistics regression."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>admit</th>\n",
       "      <th>gre</th>\n",
       "      <th>gpa</th>\n",
       "      <th>prestige1</th>\n",
       "      <th>prestige2</th>\n",
       "      <th>prestige3</th>\n",
       "      <th>prestige4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>380.0</td>\n",
       "      <td>3.61</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>660.0</td>\n",
       "      <td>3.67</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>800.0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>640.0</td>\n",
       "      <td>3.19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>520.0</td>\n",
       "      <td>2.93</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>395</th>\n",
       "      <td>0</td>\n",
       "      <td>620.0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>0</td>\n",
       "      <td>560.0</td>\n",
       "      <td>3.04</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397</th>\n",
       "      <td>0</td>\n",
       "      <td>460.0</td>\n",
       "      <td>2.63</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>0</td>\n",
       "      <td>700.0</td>\n",
       "      <td>3.65</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>0</td>\n",
       "      <td>600.0</td>\n",
       "      <td>3.89</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>397 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     admit    gre   gpa  prestige1  prestige2  prestige3  prestige4\n",
       "0        0  380.0  3.61        0.0        0.0        1.0        0.0\n",
       "1        1  660.0  3.67        0.0        0.0        1.0        0.0\n",
       "2        1  800.0  4.00        1.0        0.0        0.0        0.0\n",
       "3        1  640.0  3.19        0.0        0.0        0.0        1.0\n",
       "4        0  520.0  2.93        0.0        0.0        0.0        1.0\n",
       "..     ...    ...   ...        ...        ...        ...        ...\n",
       "395      0  620.0  4.00        0.0        1.0        0.0        0.0\n",
       "396      0  560.0  3.04        0.0        0.0        1.0        0.0\n",
       "397      0  460.0  2.63        0.0        1.0        0.0        0.0\n",
       "398      0  700.0  3.65        0.0        1.0        0.0        0.0\n",
       "399      0  600.0  3.89        0.0        0.0        1.0        0.0\n",
       "\n",
       "[397 rows x 7 columns]"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pdummies2 = pd.get_dummies(df['prestige'])\n",
    "df = pd.concat([df,pdummies2],axis=1)\n",
    "df = df.drop('prestige',axis=1)\n",
    "df.rename(columns = {1:'prestige1',2:'prestige2',3:'prestige3',4:'prestige4'},inplace = True)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After creating dummy variables for prestige, a logistic regression model is fit to our dataset so we can find the coefficients for each feature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.589121\n",
      "         Iterations 5\n"
     ]
    }
   ],
   "source": [
    "feature_cols = ['gre','gpa','prestige2','prestige3','prestige4']\n",
    "X = df[feature_cols]\n",
    "y = df['admit']\n",
    "\n",
    "mod = sm.Logit(y,X)\n",
    "res = mod.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> ## Question 5. Results\n",
    "> Write up your results."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Coefficients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "gre          0.001367\n",
       "gpa         -0.132306\n",
       "prestige2   -0.956223\n",
       "prestige3   -1.537500\n",
       "prestige4   -1.869928\n",
       "dtype: float64"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res.params"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Odds Ratios"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "gre          1.001368\n",
       "gpa          0.876073\n",
       "prestige2    0.384342\n",
       "prestige3    0.214918\n",
       "prestige4    0.154135\n",
       "dtype: float64"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.exp(res.params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> ## Question 6. Visuals\n",
    "> Provide a table or visualization of these results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                  admit   No. Observations:                  397\n",
      "Model:                          Logit   Df Residuals:                      392\n",
      "Method:                           MLE   Df Model:                            4\n",
      "Date:                Tue, 31 Jan 2017   Pseudo R-squ.:                 0.05722\n",
      "Time:                        17:09:24   Log-Likelihood:                -233.88\n",
      "converged:                       True   LL-Null:                       -248.08\n",
      "                                        LLR p-value:                 1.039e-05\n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [95.0% Conf. Int.]\n",
      "------------------------------------------------------------------------------\n",
      "gre            0.0014      0.001      1.308      0.191        -0.001     0.003\n",
      "gpa           -0.1323      0.195     -0.680      0.497        -0.514     0.249\n",
      "prestige2     -0.9562      0.302     -3.171      0.002        -1.547    -0.365\n",
      "prestige3     -1.5375      0.332     -4.627      0.000        -2.189    -0.886\n",
      "prestige4     -1.8699      0.401     -4.658      0.000        -2.657    -1.083\n",
      "==============================================================================\n"
     ]
    }
   ],
   "source": [
    "print res.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> ## Question 7.  Discussion\n",
    "> Write up your discussion and future steps."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on our results, we can see which features can predict greater odds at being admitted to UCLA. Applicants from prestige schools have greater odds of being admitted than applicants from undergraduate schools of lower prestige. A higher GPA and GPA score shows a more likely chance at being admitted to UCLA."
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
